# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

CFLAGS 			+= -I $(MODEL_INC_DIR)
FFLAGS	         =
CPPFLAGS         =
FPPFLAGS         =
CLEANFILES       = 

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest

# Where to find the model code.
MODEL_SRC_DIR = ../../src
MODEL_INC_DIR = ../../include

# Where to find test code.
TESTS_SRC_DIR = src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I $(MODEL_INC_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile. Remember to add new tests you
# created to the list.
TESTS_EXE = localAssembly localAssemblyStretch localAssemblyBend \
			networkBuild networkDestroy networkRead networkWrite \
			vectorOperations systemAssembly

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Model source and object files
MODEL_SRC = $(wildcard $(MODEL_SRC_DIR)/*.c)
MODEL_OBJ = $(patsubst %.c,%.o,$(MODEL_SRC))

# Test object files
TESTS_OBJ = $(patsubst %,%_unittest.o,$(TESTS_EXE))


# Build all unittests
all: $(TESTS_EXE)

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# Needed for petsc
include ${PETSC_DIR}/lib/petsc/conf/variables
include ${PETSC_DIR}/lib/petsc/conf/rules

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest_main.cc

gtest.a: gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a: gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


# Builds library of model functions excluding the model main.c
model.a: $(filter-out %/main.o,$(MODEL_OBJ))
	$(AR) $(ARFLAGS) $@ $^

# Builds all unittest object files
$(TESTS_OBJ): %_unittest.o: $(TESTS_SRC_DIR)/%_unittest.cc $(MODEL_INC_DIR)/%.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $< -o $(TESTS_SRC_DIR)/$@

# Builds all unittest executables.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
$(TESTS_EXE): %: %_unittest.o model.a gtest_main.a chkopts
	$(CXX) $(CXXFLAGS) -lpthread ${PETSC_KSP_LIB} -o $@ $(addprefix $(TESTS_SRC_DIR)/,$(filter %.o,$^)) model.a gtest_main.a

gclean:
	rm -f $(TESTS_EXE) gtest.a gtest_main.a model.a
	find . -name '*.o' -exec rm {} \;


