# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

CFLAGS 			+= -I $(USER_INC_DIR) -I $(TEST_INC_DIR) -I $(ITEST_INC_DIR)
FFLAGS	         =
CPPFLAGS         =
FPPFLAGS         =
CLEANFILES       = 

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest

# Where to find user code.
USER_SRC_DIR = ../../src
USER_INC_DIR = ../../include

# Where to find test code.
TEST_SRC_DIR = src
TEST_INC_DIR = src
TEST_OBJ_DIR = src

# Where to find integration tests
ITEST_INC_DIR = ../integrationTests/include

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I $(USER_INC_DIR) -I $(TEST_INC_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#TESTS = sample2 localAssembly localAssemblyStretch localAssemblyBend networkBuild networkDestroy networkRead networkWrite vectorOperations systemAssembly 
TESTS = localAssembly localAssemblyStretch localAssemblyBend networkBuild networkDestroy networkRead networkWrite vectorOperations systemAssembly 

MYSRC = $(patsubst %,%.c,$(TESTS))
MYOBJ = $(patsubst %,%.o,$(TESTS))
MYTES = $(patsubst %,%_unittest.o,$(TESTS))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Model source and object files
#SRC 			 = $(filter-out $(SRC_DIR)/main.c, $(wildcard $(SRC_DIR)/*.c))
#OBJ 			 = $(filter-out $(SRC_DIR)/main.o, $(patsubst %.c,%.o,$(SRC)))

# Test source and object files
TEST_SRC 		 = $(wildcard $(TEST_SRC_DIR)/*.cc)

USER_SRC 		 = $(wildcard $(USER_SRC_DIR)/*.c)
USER_OBJ		 = $(patsubst %.c,%.o,$(USER_SRC))
#USER_INC 		 = $(wildcard $(USER_INC_DIR)/*.h)
#ITEST_INC 		 = $(wildcard $(ITEST_INC_DIR)/*.h)
#TEST_OBJ 		 = $(patsubst %.c,%.o,$(TEST_SRC))

# House-keeping build targets.

all: $(TESTS)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# Needed for petsc
include ${PETSC_DIR}/lib/petsc/conf/variables
include ${PETSC_DIR}/lib/petsc/conf/rules

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest_main.cc

gtest.a: gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a: gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

model.a: $(filter-out %/main.o,$(USER_OBJ))
	$(AR) $(ARFLAGS) $@ $^

# # generate all model object files
#$(MYOBJ): %.o: $(USER_SRC_DIR)/%.c $(USER_INC_DIR)/%.h $(GTEST_HEADERS)
#	$(PCC) $(CPPFLAGS) -I$(GTEST_DIR) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $< -o $(TEST_OBJ_DIR)/$@

# # generate all unittest object files
$(MYTES): %_unittest.o: $(TEST_SRC_DIR)/%_unittest.cc $(USER_INC_DIR)/%.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $< -o $(TEST_OBJ_DIR)/$@

# # generate executable for all unittests
$(TESTS): %: %_unittest.o model.a gtest_main.a chkopts
	$(CXX) $(CXXFLAGS) -lpthread ${PETSC_KSP_LIB} -o $@ $(addprefix $(TEST_SRC_DIR)/,$(filter %.o,$^)) model.a gtest_main.a

# # Builds a sample test.  A test should link with either gtest.a or
# # gtest_main.a, depending on whether it defines its own main()
# # function.

# # SAMPLE UNITTEST
# # (used for sanity check)
# sample2.o: $(USER_SRC_DIR)/sample2.cc $(USER_INC_DIR)/sample2.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $(USER_SRC_DIR)/sample2.cc -o $(TEST_SRC_DIR)/$@

# sample2_unittest.o: $(TEST_SRC_DIR)/sample2_unittest.cc $(USER_INC_DIR)/sample2.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_SRC_DIR)/sample2_unittest.cc -o $(TEST_SRC_DIR)/$@

# sample2_unittest: sample2.o sample2_unittest.o gtest_main.a chkopts
# 	$(CXX) $(CXXFLAGS) -lpthread ${PETSC_KSP_LIB} -o $@ $(TEST_SRC_DIR)/sample2.o $(TEST_SRC_DIR)/sample2_unittest.o gtest_main.a 
# #	${CLINKER} changed from this here

# # Draft of automated version
# #
# #$(USER_OBJ): $(USER_SRC_DIR)/$(USER_SRC) $(USER_INC_DIR)/$(USER_INC) $(GTEST_HEADERS)
# #	$(PCC) $(CPPFLAGS) -I$(GTEST_DIR) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $(USER_SRC_DIR)/$(USER_SRC) -o $(TEST_OBJ_DIR)/$@
# #
# #$(TEST_OBJ): $(TEST_SRC_DIR)/$(TEST_SRC) \
# #                     $(USER_INC_DIR)/$(USER_INC) $(GTEST_HEADERS)
# #	$(CXX) $(CPPFLAGS) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $(TEST_SRC_DIR)/$(TEST_SRC) -o $(TEST_OBJ_DIR)/$@
# #
# #$(TEST_EXE): $(USER_OBJ) $(TEST_OBJ) gtest_main.a chkopts
# #	$(CXX) $(CXXFLAGS) -lpthread ${PETSC_KSP_LIB} -o $@ $(TEST_SRC_DIR)/$(TEST_OBJ) $(TEST_SRC_DIR)/$(USER_OBJ) gtest_main.a
# #

# #
# # Make localAssembly
# #
# localAssembly.o: $(USER_SRC_DIR)/localAssembly.c $(USER_INC_DIR)/localAssembly.h $(GTEST_HEADERS)
# 	$(PCC) $(CPPFLAGS) -I$(GTEST_DIR) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $(USER_SRC_DIR)/localAssembly.c -o $(TEST_OBJ_DIR)/$@

# localAssembly_unittest.o: $(TEST_SRC_DIR)/localAssembly_unittest.cc \
#                      $(USER_INC_DIR)/localAssembly.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(PETSC_CC_INCLUDES) $(CXXFLAGS) -c $(TEST_SRC_DIR)/localAssembly_unittest.cc -o $(TEST_OBJ_DIR)/$@

# localAssembly_unittest: localAssembly.o localAssembly_unittest.o gtest_main.a chkopts
# 	$(CXX) $(CXXFLAGS) -lpthread ${PETSC_KSP_LIB} -o $@ $(TEST_SRC_DIR)/localAssembly_unittest.o $(TEST_SRC_DIR)/localAssembly.o gtest_main.a



gclean:
	rm -f $(TESTS) gtest.a gtest_main.a model.a
	find . -name '*.o' -exec rm {} \;


